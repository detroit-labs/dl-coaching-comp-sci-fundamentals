#+TITLE:  Computer Science Fundamentals
#+AUTHOR: Detroit Labs Dev Coaching
#+DATE:   2018
#+EMAIL:  ndotz@detroitlabs.com
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   skip:nil d:nil todo:t pri:nil tags:not-in-toc timestamp:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_THEME: league
#+REVEAL_MARGIN: 0.2
# #+REVEAL_MIN_SCALE: 0.5
# #+REVEAL_MAX_SCALE: 2.5
#+REVEAL_EXTRA_CSS: ./presentation.css

* Lab 3
  #+BEGIN_NOTES
  - Strings
  - Pointers
  - Bit-wise Operations
  - Enumerations
  #+END_NOTES
* Strings
** Strings vs Chars
   #+BEGIN_NOTES
   - You might be familiar with how we designate strings from other
     languages, which is done with the double-quote.
   - As we've seen a few times but have not belabored, this is
     distinct from defining a single character, which is done with the
     single-quote.
   - It's important to note that even a single character in a string
     is not the same as a char variable definition containing the same
     character.
   - More confounding is that assigning a string to a char variable
     will compile, and hopefully we'll understand why that is
     acceptable shortly. This does generate a warning but is still a
     potential point of confusion.
   #+END_NOTES
   #+BEGIN_SRC c
   "C is weird"  /* string */
   'c'           /* char   */
   "C"           /* string */

   char c = "c"; /* this compiles but probably
                    isn't what you intended!   */
   #+END_SRC c
** Strings are char[]
   #+BEGIN_NOTES
   - So, what is the type for a string? We can define a string literal
     by placing whatever characters we would like in the string
     between double-quotes, but there is no built-in string type in C.
   - The actual type we need to assign a string literal to is an array
     of characters.
   #+END_NOTES
   #+BEGIN_SRC c
   char d[] = "Detroit";
   #+END_SRC
** String sizes and '\0'
   #+BEGIN_NOTES
   - When we declare a string to be a character array, we're actually
     getting a bit of compiler magic to work for us.
   - When we assign a string to a character array, the compiler adds
     an additional null character to the end of the string if there is
     room in the array. This null character is used by convention to
     mark the end of a string and is used by library functions like
     printf to know when to stop functioning on values.
   - This is why you will usually see string literals defined as a
     non-specific size.
   - If explicitly defining the size of a character array to hold a
     string, be sure to leave an additional character's worth of space
     in the array's size to take full advantage of the compiler's
     special treatment for strings.
   #+END_NOTES
   #+BEGIN_SRC c
   char d[8] = { 'D', 'e', 't', 'r', 'o', 'i', 't', '\0' };
   #+END_SRC
** String Equality
   #+BEGIN_NOTES
   - If you're used to more fully-featured languages, you'll be
     disappointed to know that comparing strings can't be accomplished
     with the equality operator for numbers.
   - This is because even if they contain the same data, or even the
     same first element, arrays will never evaluate as the same from
     via the number equality operator.
   #+END_NOTES
   #+BEGIN_SRC c
    char c[] = "cat";
    char c2[] = "cat";
    if (c == c2) {
        printf("match\n");
    }  else {
        printf("no match\n");  /* cannot compare arrays! */
    }
   #+END_SRC
** Null String
   #+BEGIN_NOTES
   - This is, of course, except for the null string.
   - The null string is a string containing only the special null
     character, which is the default for an empty string assigned to a
     character array of unspecified length. The null string will
     compare correctly with a char representing the null character,
     which we'll understand more in a moment when we talk about pointers.
   #+END_NOTES
   #+BEGIN_SRC c
    char c[] = "";
    char c2 = '\0';
    if (c[0] == c2) {
        printf("match\n");
    }  else {
        printf("no match\n");
    }
   #+END_SRC
** Escape Characters
   #+BEGIN_NOTES
   - The null character is not the only special character available,
     it is one of several escape characters available, each of which
     is prefaced by the backslash.
   - The backslash itself is an escape character, and thus if we want
     to represent a literal backslash in a string, we can do so by
     prefacing it with a backslash.
   - We can also use the backslash to escape a single-quote to
     define a character representing a single-quote, or to escape
     double-quotes that we would like to show up as literals in a string.
   #+END_NOTES
   #+BEGIN_SRC c
   char newline = '\n';
   char about_newline[] = "the newline character is \\n";

   char sing_quo = '\'';
   char doub_quo[] = "This string \"contains quotes\"";
   #+END_SRC
** Character Math
   #+BEGIN_NOTES
   - As we discussed in session 1, it's important to note that
     characters are still number values, just ones that are
     interpreted specially based on context. Because of this, it's
     still possible to use math operations on them, and potentially
     change the contents of the string.
   - This also gives us the advantage of using comparison operators
     for if we know how to use the ASCII table.
   #+END_NOTES
   #+BEGIN_SRC c
    char c[] = "cars go fast";
    printf("%s\n", c);
    c[2] += 2;
    c[10] -= 1;
    printf("%s\n", c);
   #+END_SRC
   #+BEGIN_SRC c
   if (thing >= 'A' && thing <= 'Z') {
       printf("is captial\n");
   }
   #+END_SRC
* Pointers
** Pointers and Addresses
   #+BEGIN_NOTES
   - It finally comes time to talk about pointers.
   - Pointers are an abstraction around a memory address, and are
     denoted by the asterisk in their declaration.
   - A pointer can be made to point to any valid data type, and points
     to wherever that type begins in memory.
   - We can find the address of a given value by using the address
     operator, represented by the ampersand. This is often used to
     provide an address for a pointer value to point to.
   - The pointer can then be dereferenced once again using the
     asterisk, which provides the value of whatever memory address it
     points to.
   #+END_NOTES
   #+BEGIN_SRC c
   int some_int = 322;
   int *ptr = &some_int;
   printf("some_int is %i, ptr is %i, ptr points to %i\n",
          some_int, ptr, *ptr);
   #+END_SRC
   #+BEGIN_SRC
   some_int is 322, ptr is -486382484, ptr points to 322
   #+END_SRC
** Pointers and Complex Data Types
   #+BEGIN_NOTES
   - Again, pointers can be made to point to any valid data type, so
     it's not only acceptable but common to create pointers to complex
     data structures. This is especially common when passing large
     data structure to functions to help maintain efficiency by
     preventing the copying of large amounts of data into a
     function. When passed as pointers, structs then become mutable in
     the same way that arrays are from within a function's body.
   - If a pointer points to a struct, the pointer must first be
     dereferenced before its members can be accessed. Again, this is
     so common that there is an operator dedicated to exactly this
     functionality, the structure pointer operator, more commonly
     known as the right arrow.
   #+END_NOTES
   #+BEGIN_SRC c
   struct time {
       int hour;
       int minute;
   };
   struct time now = { 12, 21 };
   struct time *now_p = &now;

   (*now_p).hour = 13;
   now_p->minute = 31;
   #+END_SRC
** Pointers and Arrays
   #+BEGIN_NOTES
   - In session 2 we learned that passing an array to a function
     actually passes a pointer to the array. Because of this, unlike
     other function arguments, the function body was not given its own
     copy of the array argument and therefore was mutable from the
     context of the array, but also no information about the length of
     the array accompanied array argument, so if the length was
     relevant, we would need to provide that as a separate argument
     ourselves.
   - As we now know, pointers simply point to a memory location. This
     memory location, like every non-complex data type we've
     encountered so far, is represented internally as just another
     number. This means that number can be incremented and
     decremented, and the resulting memory locations can be
     accessed. Deep down, this is all the index of the array is - an
     offset distance of memory locations away from the start of the
     array.
   - Accessing memory locations in the way is actually more efficient
     than using array indices, but this shouldn't tempt you away from
     using the subscript operator with array indices unless you have
     other good reasons.
   - Notice we also don't need the address operator here: the compiler
     recognizes a reference to an array without the use of the
     subscript operator as a pointer by default.
   #+END_NOTES
   #+BEGIN_SRC c
   int nums[] = {1, 2, 3, 4, 5};
   int *n = nums;

   *n          == 1;
   *(n    + 1) == 2;
   *(nums + 2) == 3;
   *(nums + 3) == 4;
   *(nums + 4) == 5;
   #+END_SRC
** Pointers and Arrays
   #+BEGIN_NOTES
   - This is an example of how we can use an array pointer and
     incrementing to access the array elements in a loop.
   #+END_NOTES
   #+BEGIN_SRC c
   int nums[] = {1, 2, 3, 4, 5};
   int i = 0;
   while(i < 5) {
       printf("%i\n", *(nums + i));
       i++;
   }
   #+END_SRC
** Arrays of Strings
   #+BEGIN_NOTES
   - Previously I told you that multi-dimensional arrays needed to be
     of uniform size. That was true at the time given the tools that
     we had at hand. However, now that we have pointers, we can work
     around those limitations.
   - By defining an array of pointers, we still have an array of
     uniform size - 1 pointer per index. However, what those pointers
     point to may be of arbitrary size. Therefore, by pointing to an
     array of pointers instead of an array of arrays, the sub arrays
     can be of undeclared size.
   #+END_NOTES
   #+BEGIN_SRC c
    char *words[] = {"NOT", "4", "CATS"};

    for(int i = 0; i < 3; i++) {
        printf("%s\n", *(words + i));
    }
   #+END_SRC
** Linked Lists
   #+BEGIN_NOTES
   - As we approach the wrap-up of our discussion of pointers, we can
     look at a practical use of pointers. Last session we discussed
     the concept of a linked list data structure and its relative
     merit compared to an array. We now have the tools at hand to
     design this data structure ourselves.
   - A linked list item will be of some value and hold a pointer to
     another item. To link items together, we simply set the pointer
     reference of one item to the address of the item that we intend
     to follow it. If we choose to iterate over the list, we can use
     the handy knowledge that eventually we will come across a null
     pointer (which evaluates to false in a boolean context) as our
     looping condition.
   #+END_NOTES
   #+BEGIN_SRC c
    struct item {
        int value;
        struct item *next;
    };
    struct item first = { .value = 10 };
    struct item second = { .value = 20 };
    first.next = &second;

    struct item new_first = { 5, &first };

    struct item *head = &new_first;
    int i = 0;
    while (head) {
        printf("position %i - %i\n", i, head->value);
        i++;
        head = head->next;
    }
   #+END_SRC
** Pointers and Functions
   #+BEGIN_NOTES
   - While not common in most practical C programs, you may find some
     situations where you will encounter a pointer to a
     function. Often, these may be attached to a struct to mimic
     something along the lines of object-orientation by having a data
     structure carry with it access to the functions that might
     operate on its data, or it may be used for higher-order function
     implementations, such as the C standard library's quicksort
     implementation, qsort.
   #+END_NOTES
   #+BEGIN_SRC c
   int add1(int i) {
       return i + 1;
   }

   int (*f)(int) = &add1;

   int six = (*f)(5);
   #+END_SRC
   #+BEGIN_SRC c
   void qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))

   #+END_SRC
* Bit-twiddling
** Byte Layout and Ordering
   #+BEGIN_NOTES
   - While often we use the abstractions provided by the system to
     manipulate numbers in memory, this is not necessarily the optimal
     solution. It could be less memory or speed efficient to do so,
     although those are rarely problems we may come up against as
     application developers on fast, modern systems, and so we are
     often just as happy to accept the abstractions available to get
     our work done.
   - However, there are numerous applications where the ordering of
     specific bits actually matters, and we may not be able to
     reliably depend on the compiler to do what we need. We can see
     here simply by looking at a short integer definition of the
     number 15 - the bytes are reversed on big and little endian
     systems, so if the actual bits in question here are important
     outside of their context as a short int, we can't rely on them!
   - So, we may need to resort to what is known colloquially as
     "bit-twiddling" - that is: manipulating bits directly.
   - This is most common when dealing with low-level programming such
     as low-powered bluetooth or radio programming, or when writing
     systems software that talks directly to hardware.
   - Take for example this completely contrived bit field / byte flag
     / bit mask which shows which of a devices telecommunications
     services are available.
   #+END_NOTES
   #+BEGIN_SRC c
   0x000F = 0b00000000 0b00001111 /* big endian */
          = 0b00001111 0b00000000 /* little endian */
   #+END_SRC
   #+BEGIN_SRC
   BT   GPS_C  FM    4G
   |     |     |     |
   0  0  1  0  0  1  0  1
      |     |     |     |
     NFC  GPS_F  WIFI  CELL
   #+END_SRC
** Twos Complement
   #+BEGIN_NOTES
   - To put this in context before we get into the thick of it, let's
     think back to the way C implements negative numbers.
   - The actual formula for representing a signed number in C is to
     add one to the number if it is positive, then flip the remaining
     bits. In this way, the leftmost bit controls the sign, and the
     remaining bits control the distance away from the 0 point.
   - Thus, in all signed integer implementation, the value of -1 is
     always all available bits set to one.
   #+END_NOTES
   #+BEGIN_SRC
    4 = 0000 0100
    5 = 0000 0101
   -4 = 1111 1010
   #+END_SRC
** Bit Operations
   #+BEGIN_NOTES
   - There are 6 operations available to us for manipulating bits.
   #+END_NOTES
   #+BEGIN_SRC
   &    AND
   |    OR
   ^    XOR
   ~    Ones complement
   <<   Left Shift
   >>   Right Shift
   #+END_SRC
** Bitwise AND
   #+BEGIN_NOTES
   - Using AND on two sets of bits will produce a new set of bits
     containing only bits set to 1 where their positions were 1 in both
     sets of the original bits.
   #+END_NOTES
   #+BEGIN_SRC c
   0b00100101      /* 37 - 4G is off, WIFI is on */
   #+END_SRC
   #+BEGIN_SRC c
     0b00100101
   & 0b00000010    /* is 4G available? */
   = 0b00000000    /*    37 & 2 = 0    */
   #+END_SRC
   #+BEGIN_SRC c
     0b00100101
   & 0b00000100    /*   is WIFI on?    */
   = 0b00000100    /*    37 & 4 = 4    */
   #+END_SRC
** Bitwise OR and XOR
   #+BEGIN_NOTES
   - Using OR on two sets of bits will produce a new set of bits
     containing bits set to 1 where their positions were 1 in either
     of the sets of the original bits.
   - Using XOR on two sets of bits will produce a new set of bits
     containing bits set to 1 where their positions were 1 in either
     one of the sets of the original bits, but not ones that were set
     in both sets of bits.
   #+END_NOTES
   #+BEGIN_SRC c
     0b00100101
   | 0b00000010    /* make 4G available */
   = 0b00100111    /*    37 | 2 = 39    */
   #+END_SRC
   #+BEGIN_SRC c
     0b00100101
   ^ 0b00000100    /*   turn WIFI off   */
   = 0b00100001    /*    37 ^ 4 = 33    */
   #+END_SRC
** Ones Complement
   #+BEGIN_NOTES
   - The ones complement operator flips all the available bits to
     their opposite value for any given set of bits.
   #+END_NOTES
   #+BEGIN_SRC c
    ~0b00110101   /*  53 */
   = 0b11001010   /* -54 */
   #+END_SRC
   #+BEGIN_SRC c
     0b00000100   /*  4 */
   + 0b00000001   /* +1 */
   = 0b00000101   /*  5 */
    ~0b00000101   /* ~5 */
   = 0b11111010   /* -4 */
   #+END_SRC
** Shift Operators
   #+BEGIN_NOTES
   - The left and right shift operators shift bits left and
     right. They are effectively multiply and divide by two per step,
     respectively.
   - However, note that whatever direction the bits are shifted, the
     remaining bits in the memory space will always be filled with 0
     bits. Shifting too far will inevitably cause a rollover the value
     if the most-significant bits are shifted out of a memory space.
   #+END_NOTES
   #+BEGIN_SRC c
    0b00110101; /* 53  - 00110101 */
    bits << 1;  /* 106 - 01101010 */
    bits << 4;  /* 80  - 01010000 */
   #+END_SRC
   #+BEGIN_SRC c
    0b00110101; /* 53  - 00110101 */
    bits >> 1;  /* 26  - 00011010 */
    bits >> 4;  /* 3   - 00000011 */
   #+END_SRC
** Bit Fields
   #+BEGIN_NOTES
   - By this point, you may be intimidated about trying to keep track
     of which bits belong to which portions of the data when dealing
     with packed bit fields as we have been up to this point. Luckily,
     C provides us with a mechanism for dealing with bit field in the
     form of the bit field struct.
   - Using this syntax, we can specify how many bits each of a bit
     field should be used for each field, and we can use the struct
     member syntax to access and set these values as if they were the
     type we have declared them.
     p294
   #+END_NOTES
   #+BEGIN_SRC c
   struct pixel {
       unsigned int x:2;
       unsigned int y:2;
       unsigned int r:4;
       unsigned int g:4;
       unsigned int b:4;
   };
   #+END_SRC
* Enumerations
   #+BEGIN_NOTES
   p321
   #+END_NOTES
   #+BEGIN_SRC c
   enum pixelColor { red, green, blue };
   enum pixelColor one = red, two = blue;

   if(one == blue) { /* ... */ }

   switch(two) {
      case red:   break;
      case green: break;
      /* ... */
   #+END_SRC
* Typedef
   #+BEGIN_NOTES
   p325
   #+END_NOTES
   #+BEGIN_SRC c
   typedef char* String;
   typedef String[] StringArray;

   typedef struct {
       int x;
       int y;
   } Coordinate;

   Coordinate point1 = { 3, 5 };
   #+END_SRC
