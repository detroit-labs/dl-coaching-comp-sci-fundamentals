#+TITLE:  Computer Science Fundamentals
#+AUTHOR: Detroit Labs Dev Coaching
#+DATE:   2018
#+EMAIL:  ndotz@detroitlabs.com
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   skip:nil d:nil todo:t pri:nil tags:not-in-toc timestamp:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_THEME: league
#+REVEAL_MARGIN: 0.2
# #+REVEAL_MIN_SCALE: 0.5
# #+REVEAL_MAX_SCALE: 2.5
#+REVEAL_EXTRA_CSS: ./presentation.css

* Lecture 9
* If Only Programming Languages Were Perfect.
  #+BEGIN_NOTES
  #+END_NOTES
** Assembly
   #+BEGIN_SRC asm
.text
.global pgcd
pgcd:
        push    %ebp
        mov     %esp, %ebp

        mov     8(%ebp), %eax
        mov     12(%ebp), %ecx
        push    %edx
.loop:
        cmp     $0, %ecx
        je      .end
        xor     %edx, %edx
        div     %ecx
        mov     %ecx, %eax
        mov     %edx, %ecx
        jmp     .loop
.end:
        pop     %edx
        leave
        ret
   #+END_SRC
** C
   #+BEGIN_SRC c
int gcd(int u, int v) {
    if (u &lt; 0)
        u = -u;
    if (v &lt; 0)
        v = -v;
    if (v)
        while ((u %= v) && (v %= u));
    return (u + v);
}
   #+END_SRC
** C++
   #+BEGIN_SRC c++
#include &lt;boost/math/common_factor.hpp>
#include &lt;iostream>

int main() {
   std::cout &lt;&lt; "The least common multiple of 12 and 18 is "
             &lt;&lt; boost::math::lcm(12, 18) &lt;&lt; " ,\n"
             &lt;&lt; "and the greatest common divisor "
             &lt;&lt; boost::math::gcd(12, 18) &lt;&lt; " !" &lt;&lt; std::endl;
   return 0;
}
   #+END_SRC
** Object Oriented
   - Smalltalk
   - Java
   - Ruby
   - Python
   - C#
   - Javascript
** Functional
   - Racket
   - Clojure
   - OCaml
   - Haskell
   - Erlang
** Interpreted
   - Most LISPs
   - Perl
   - Javascript
   - Ruby
   - Python
   - PHP
** Static Typing
   - Java
   - C#
   - Swift
   - Scala
   - Kotlin
   - Haskell
   - Rust
** Dynamic Typing
   - Most LISPs
   - Perl
   - Javascript
   - Ruby
   - Python
   - PHP
** VMs
   - C# / .NET
   - Java / JVM
   - Racket
   - Erlang
   - Ruby
   - Python
   - Smalltalk
** Native Code
   - Delphi
   - Common LISP
   - OCaml
   - Go
   - Rust
   - Haskell
** Why?
** The Best Programming Language
   #+BEGIN_NOTES
   - If you have nails, use a hammer
   - If you have screws, use a screwdriver
   - If you must cut boards, use a saw
   #+END_NOTES
   â€¦ is the one that fits the problem space best.
