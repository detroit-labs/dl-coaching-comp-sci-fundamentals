#+TITLE:  Computer Science Fundamentals
#+AUTHOR: Detroit Labs Dev Coaching
#+DATE:   2018
#+EMAIL:  ndotz@detroitlabs.com
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   skip:nil d:nil todo:t pri:nil tags:not-in-toc timestamp:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_THEME: league
#+REVEAL_MARGIN: 0.2
# #+REVEAL_MIN_SCALE: 0.5
# #+REVEAL_MAX_SCALE: 2.5
#+REVEAL_EXTRA_CSS: ./presentation.css

* Lab 8
  #+BEGIN_NOTES
  #+END_NOTES
* STL Containers
  #+BEGIN_NOTES
  - Now that we've seen some of the most common and useful data
    structures invented in computer science, let's see what C++ has to
    offer for us.
  - The STL includes implementations of many of the abstract data
    types we discussed in the lecture, so we will review those
    implementations.
  #+END_NOTES
** Container Commonalities
   #+BEGIN_NOTES
   - Default Constructor
   - Copy constructor w/ deep copy
   - Content-based equality with the equal and not-equal operators
   - Lexicographical ordering with comparison operators
   - Functions that return iterators to the beginning and ending of
     collections
   - Functions that provide information about the collection's
     capacity like empty, size and max_size.
   #+END_NOTES
   - Default Constructor
   - Copy constructor
   - ~==~ & ~!=~
   - ~{1, 2, 3} < {1, 3, 2}~
   - ~begin()~ and ~end()~
   - ~empty()~, ~size()~ and ~max_size()~
** Vector
   #+BEGIN_NOTES
   #+END_NOTES
   #+BEGIN_SRC c++
   vector&lt;int> v;
   vector&lt;int>::iterator it;
   for (int i = 1; i <= 5; i++)
       v.push_back(i);
   for (it= v.begin(); it!= v.end(); ++it)
       cout &lt;&lt; *it&lt;&lt; endl;
   #+END_SRC
** List
   #+BEGIN_NOTES
   - This is implemented as a doubly-linked list
   #+END_NOTES
   #+BEGIN_SRC c++
   list&lt;int> l;
   list&lt;int>::iterator it;
   for (int i = 1; i <=5; ++i)
       l.push(i);
   for(it = l.begin(); it != l.end(); ++it)
       cout &lt;&lt; *it &lt;&lt; endl;
   #+END_SRC
** Map
   #+BEGIN_NOTES
   #+END_NOTES
   #+BEGIN_SRC c++
   map&lt;int,int> m;
   map&lt;int,int>::iterator it;
   for (int i = 1; i <= 5; ++i)
       m.insert(pair&lt;int,int>(i,i*100));

   for (it = m.begin(); it != m.end(); ++it)
       cout &lt;&lt; it->first &lt;&lt; '\t' &lt;&lt; it->second &lt;&lt; endl;

   if (it = m.find(3) != m.end())
       cout &lt;&lt; it->first &lt;&lt; ' is ' &lt;&lt; it->second &lt;&lt; endl;
   else
       cout &lt;&lt; "Couldn't find that element!" &lt;&lt; endl;
   #+END_SRC
** Multimap
   #+BEGIN_NOTES
   #+END_NOTES
   #+BEGIN_SRC c++
   multimap&lt;int,int> m;
   multimap&lt;int,int>::iterator it;
   for (int i = 1; i <= 5; ++i) {
       m.insert(pair&lt;int,int>(i,i));
       m.insert(pair&lt;int,int>(i,i*100));
   }

   m.count(2);

   typedef multimap<string, string>::iterator iter;
   pair<iter,iter> found = m.equal_range(4);
   for (it = found->first; i != found->second; i++)
       cout &lt;&lt; it->first &lt;&lt; ' is ' &lt;&lt; it->second &lt;&lt; endl;
   #+END_SRC
** Set
   #+BEGIN_NOTES
   #+END_NOTES
   #+BEGIN_SRC c++
   set&lt;int,int> s;
   set&lt;int,int>::iterator it;
   for (int i = 1; i <= 5; ++i) {
       s.insert(i);
       s.insert(i*2);
   }
   if (it = s.find(4) != s.end())
       cout << '4 is in the set' << endl;
   #+END_SRC
** Multiset
   #+BEGIN_NOTES
   #+END_NOTES
   #+BEGIN_SRC c++
   multiset&lt;int,int> m;
   multiset&lt;int,int>::iterator it;
   for (int i = 1; i <= 5; ++i) {
       m.insert(i);
       m.insert(i*2);
   }
   #+END_SRC
** Stack
   #+BEGIN_NOTES
   #+END_NOTES
   #+BEGIN_SRC c++
   stack&lt;int> s;
   for (int i = 1; i <=5; ++i)
       s.push(i);
   while(!s.empty()) {
       cout &lt;&lt; s.top() &lt;&lt; endl;
       s.pop();
   }
   #+END_SRC
** Queue
   #+BEGIN_NOTES
   #+END_NOTES
   #+BEGIN_SRC c++
   queue&lt;int> q;
   for (int i = 1; i <= 5; ++i)
       q.push(i);
   while(!q.empty()) {
       cout &lt;&lt; q.front() &lt;&lt; endl;
       q.pop();
   }
   #+END_SRC
** Deque
   #+BEGIN_NOTES
   #+END_NOTES
   #+BEGIN_SRC c++
   deque&lt;int> q;
   for (int i = 1; i <= 5; ++i)
       if (i % 2 == 0)
           q.push_front(i);
       else
           q.push_back(i);
   while(!q.empty()) {
       cout &lt;&lt; q.front() &lt;&lt; endl;
       q.pop_front();
   }
   #+END_SRC
** Priority Queue
   #+BEGIN_NOTES
   #+END_NOTES
   #+BEGIN_SRC c++
    priority_queue&lt;int> q;
    q.push(4);
    q.push(2);
    q.push(3);
    q.push(5);
    q.push(1);
    while (!q.empty()) {
        cout &lt;&lt; "    " &lt;&lt; q.top();
        q.pop();
    }
    cout << endl;
    // 5    4    3    2    1
   #+END_SRC
