#+TITLE:  Computer Science Fundamentals
#+AUTHOR: Detroit Labs Dev Coaching
#+DATE:   2018
#+EMAIL:  ndotz@detroitlabs.com
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   skip:nil d:nil todo:t pri:nil tags:not-in-toc timestamp:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_THEME: league
#+REVEAL_MARGIN: 0.2
# #+REVEAL_MIN_SCALE: 0.5
# #+REVEAL_MAX_SCALE: 2.5
#+REVEAL_EXTRA_CSS: ./presentation.css

* Lab 2
  #+BEGIN_NOTES
  - To go along with our discussion of data structures and algorithms,
    this section of the book is going to introduce some of the tools
    that will assist us in developing more complicated data structures
    and algorithms
  - First, we'll take a look at arrays, which will allow us to
    organize large numbers of similar pieces of data.
  - Next we'll look at structs, which allow us to group finite numbers
    of disparately typed data.
  - Then, we'll take our first look at functions, which are the
    primary mechanism to organize and group operations for our algorithms.
  - Last, we'll briefly look at some potentially confusing features
    introduced by the book which, in my opinion, you should avoid
    despite their existing for very good reasons.
  #+END_NOTES
* Arrays
  #+BEGIN_NOTES
  - An array in C represents an ordered set of homogeneously-typed
    data. It lets us keep a collection of similar data to be
    referenced under a single identifier.
  #+END_NOTES
** Defining Arrays
   #+BEGIN_NOTES
   - This line shows how we can define an array of ints assigned to
     the identified "numbers" which is capable of holding 5 values.
   - The square brackets here are called the "subscript operator", and
     will also be used when accessing elements of the array.
   - The memory for these values is allocated linearly in memory,
     which will help us understand more about how they work shortly.
   - We can also initialize an array when it is defined by placing the
     values to be assigned to its elements in curly brackets.
   #+END_NOTES
   #+BEGIN_SRC c
   int numbers[5];
   #+END_SRC
   #+BEGIN_SRC c
   int numbers[5] = {1, 2, 3, 4, 5};
   #+END_SRC
** Using Arrays
   #+BEGIN_NOTES
   - The subscript operator is used to access elements of an
     array. The number between the brackets is the subscript, but is
     more commonly known as the index.
   - Array indices start at 0. This is because this is actually used
     as a memory offset. That is, the first element is 0 integer-sized
     memory locations away from the beginning of the array in memory,
     the next element is 1 integer-sized memory location away from the
     beginning of the array, and so on.
   - As demonstrated here, the use of the subscript operator works
     with indices like this on any statement once an array has been
     declared. So, we can use it to access the array elements for
     assignment or to reference specific elements of the array.
   #+END_NOTES
   #+BEGIN_SRC c
   numbers[0] = 2;
   numbers[1] = 3;
   numbers[2] = 5;
   numbers[3] = 7;
   numbers[4] = 11;
   #+END_SRC
   #+BEGIN_SRC c
   int five = numbers[2];
   #+END_SRC
** Array Types
   #+BEGIN_NOTES
   - Arrays may be declared of any type, not just integers.
   - This includes even more complex types than the number types we've
     learned about so far.
   - Declaring an array of some type simply reserves an amount of
     memory large enough to store the requisite amount of data.
   #+END_NOTES
   #+BEGIN_SRC c
   char letters[26];
   float decimals[2] = {1.618, 3.14};
   #+END_SRC
** Multi-Dimensional Arrays
   #+BEGIN_NOTES
   - Because arrays can be of any type, that means they can also be
     arrays of arrays. These are known as multidimensional arrays.
   - With the set of features we've learned so far, for now any array
     must contain arrays of uniform size. In the future we'll learn
     mechanisms that allow us to keep differently-sized arrays
     together as a collection.
   #+END_NOTES
   #+BEGIN_SRC c
   int pairs[3][2];
   pairs[0] = {1, 4};
   pairs[1] = {2, 5};
   pairs[2] = {3, 6};
   int five = pairs[2][1] - pairs[0][1]; /* 6 - 1 */
   int three = five - pairs[1][0];       /* 5 - 2 */
   #+END_SRC
* Structs
  #+BEGIN_NOTES
  - While an array can let us keep an ordered collection of similar
    data, a struct is an unordered composite data types used for
    storing heterogeneously-typed data of fixed size. This is similar
    to a "record" type in other languages.
  #+END_NOTES
** Struct Basics
   #+BEGIN_NOTES
   - There are many situations where it can become cumbersome to store
     multi-part data as separate variables. This can quickly pollute
     the set of identifiers.
   - When multiple instances of some multi-part data need to be
     stored, usually a struct is the answer.
   - Struct members are accessed with the dot operator, similar to the
     way array elements are accessed with the subscript
     operator. However, rather than an index, struct members are
     accessed by their member identifier.
   #+END_NOTES
   #+BEGIN_SRC c
   int i = 2;
   char c = 'c';
   float f = 1.618;
   #+END_SRC
   #+BEGIN_SRC c
   struct nums {
       int i;
       char c;
       float f;
   };
   struct nums n;
   n.i = 2;
   n.c = 'c';
   n.f = 1.618;
   #+END_SRC
** Initializing Structs
   #+BEGIN_NOTES
   - A struct can be initialized similarly to an array by using curly
     braces.
   - Initial values for a struct are placed inside curly braces in the
     order they are declared in the struct. However, a struct can also
     be declared by explicitly declaring each member inside the curly
     braces, which negates the necessity of ordering the members the
     same way they are declared.
   #+END_NOTES
   #+BEGIN_SRC c
   struct nums n = {2, 'c', 1.618};
   struct nums n2 = {.f = 6.28, .c = 'A', i = 0};
   #+END_SRC
** Compound Literals
   #+BEGIN_NOTES
   - A struct can also be assigned after its declaration by using a
     concept called a compound literal
   - This is done by using the type cast operator, which informs the
     compiler that the literal collection in braces conforms to the
     struct type we are attempting to assign it to.
   - This is our first glimpse of the type cast operator, but we'll
     become much more familiar with it in the coming sections of the course.
   #+END_NOTES
   #+BEGIN_SRC c
   struct nums n;
   n = (struct nums) {2, 'c', 1.618};
   #+END_SRC
** Structs and Arrays
   #+BEGIN_NOTES
   - Earlier I told you that we can create an array of any valid type,
     and that holds true for compound types such as structs.
   - Just like any other array element, we can reference a struct that
     is part of an array by its index, after which it we can access
     its members
   - Similarly, it's perfectly valid to allow arrays as members of a struct.
   - Array members of a struct that are dereferenced from their struct
     can then be accessed using the subscript operator as normal.
   #+END_NOTES
   #+BEGIN_SRC c
   struct nums ns[3];
   ns[0] = {2, 'c', 1.618};
   ns[0].c == 'c';
   #+END_SRC
   #+BEGIN_SRC c
   struct stuff { char c; int nums[5]; };
   struct stuff s = { 's', {1, 2, 3, 4, 5} };
   int three = s.nums[2];
   #+END_SRC
** Structs of Structs
   #+BEGIN_NOTES
   - One last thing about structs: seeing as they can be composed of
     any valid type, it's also perfectly valid and quite common to
     other structs as members of a struct to create more complex
     compound types.
   #+END_NOTES
   #+BEGIN_SRC c
   struct combined {
       struct nums;
       struct stuff;
   }
   struct combined c = { n, s };
   float a_float = combined.nums.f;
   #+END_SRC
* Functions
  #+BEGIN_NOTES
  - In the same way that arrays and records help us organize data in
    our programs, functions can help us organize operations to
    simplify our programs and better represent algorithms.
  #+END_NOTES
** Basic Functions
   #+BEGIN_NOTES
   - It should be no surprise that C gives us the capability to
     separate our programs into functions.
   - The function below has a signature showing it returns nothing
     (void) and takes no arguments (void). It simply prints a message
     to the user and then returns after executing its only statement.
   - A function is called by using parentheses after its
     identifier. If the function takes arguments, the arguments will
     go between these parentheses.
   #+END_NOTES
   #+BEGIN_SRC c
   void notifyUser(void) {
       printf("User, a thing happened!\n");
   }
   /* ... */
   notifyUser();
   #+END_SRC
** Function Arguments & Lexical Scoping
   #+BEGIN_NOTES
   - Functions can also take arguments. This function takes a single
     integer as an argument, as indicated by the declaration within
     the parentheses after its identifier.
   - In this case, the function receives a copy of the argument, so
     the original value would be unaffected if that value of n were
     modified.
   - Similarly, the values of n and i in this function body are
     unavailable to other functions, including main, as identifiers
     are only available within the scope (set of braces) that they are
     defined.
   #+END_NOTES
   #+BEGIN_SRC c
   void showFiveTimes(int n) {
        int i = 5;
        while (i > 0) {
             printf("I am printing %i", n);
             --i;
        }
   }
   /* ... */
   showFiveTimes(0);
   #+END_SRC
** Returning Values
   #+BEGIN_NOTES
   - Functions can also return values. This function takes two
     arguments and returns an int. The return value of the function is
     placed before the function's identifier. This will also cause the
     compiler to enforce that this function does indeed return a value
     of the appropriate type.
   - The default return type for all functions that do not declare a
     return type is int, however I will suggest that you always
     declare an explicit return type for your functions to assist
     yourself and others looking at your code, as well as the compiler
     on occasion.
   #+END_NOTES
   #+BEGIN_SRC c
   int gcd(int a, int b) {
       int tmp;
       while(b != 0) {
           tmp = a % b;
           a = b;
           b = tmp;
       }
       return a;
   }
   #+END_SRC
** Functions, Arrays, and Assignments
   #+BEGIN_NOTES
   - A note about arrays and functions. Functions can certainly take
     arrays as arguments, however they work slightly differently than
     normal arguments.
   - Rather than receiving a copy of the argument, in the case of
     array arguments, functions only receive a pointer to the memory
     location of the array. Because of this, not only does the
     function not receive information about how large the array is,
     but it can also alter the value of the array in the context that
     it was originally used in!
   - This behavior may seem bizarre, but we'll be learning in the next
     session what is actually going on here. In truth, C is saving us
     some typing by performing a bit of syntactic magic for us because
     passing arrays to functions is a very common operation.
   - For now, just remember that if you pass an array as an argument
     to a function, you will also need to pass an additional argument
     for how big the array is as well as knowing that if you modify
     the contents of the array within the argument that it will affect
     the original array back in the context it was passed from!
   #+END_NOTES
   #+BEGIN_SRC c
   void plusOne(int n, int array[]) {
       for(int i = 0; i < n; ++i) {
           array[i] += 1;
       }
   }
   /* ... */
   int nums = {1, 2, 3};
   plusOne(3, nums);
   for(int i; i < 3; ++i) {
       printf("%i ", nums[i]);
   }
   /* 2 3 4 */
   #+END_SRC
** Recursion
   #+BEGIN_NOTES
   - Functions can call other functions, and that includes calling
     themselves. This means that some algorithms can be re-written
     much more concisely and with simpler operations.
   - However, it should be noted that each call to a function takes up
     a stack frame which has a limited amount of space depending on
     the system it's being compiled and executed on, while normal
     looping constructs do not take up additional stack frames. This
     means that while it might be simpler or more elegant to write
     certain kinds of algorithms, it might not be a good idea because
     if you run out of stack frames, your program will crash!
   #+END_NOTES
   #+BEGIN_SRC c
   int gcd(int a, int b) {
       int tmp;
       while(b != 0) {
           tmp = a % b;
           a = b;
           b = tmp;
       }
       return a;
   }
   #+END_SRC
   #+BEGIN_SRC c
   int gcd(int a, int b) {
       if(b == 0) return a;
       else return gcd(b, a % b);
   }
   #+END_SRC
* Danger Zone
  #+BEGIN_NOTES
  - The book introduces a few concepts in this session's chapters that
    I consider to be anti-patterns for good programming practice and I
    wanted to take a moment to point them out.
  - These features exist for very specific systems programming reasons
    in C, but do not necessarily make for good programming practice.
  #+END_NOTES
** Global Variables
   #+BEGIN_NOTES
   - In chapter 8, the book introduces the concept of global
     variables. As we saw in the section of today's lecture on
     functions, variables declared within the context of a function
     are only accessible to the function itself.
   - However, you can make declarations outside of a function
     definition. These declarations are visible to the entire program,
     from inside any function or context.
   - While this may seem like a convenient shortcut at times to prefer
     over passing around arguments, know that there are no separation
     of packages in C, and therefore no namespaces and no safety built
     in to where these variables or other declarations might be
     seen. This includes any libraries that you import!
   - Because of this, there is a much higher likelihood of name
     collisions with global variables which could cause more
     complicated programs to act in ways that you did not expect!
   - In short, please do not use global variables.
   #+END_NOTES
   #+BEGIN_SRC c
   int n = 1;
   void times2(void) {
       n *= 2;
   }
   int main(void) {
       times2();
       times2();
       printf("%i\n", n);
       return 0;
   }
   #+END_SRC
** Static Variables
   #+BEGIN_NOTES
   - Also in chapter 8, you'll be introduced to the concept of static
     variables. These variables are not available outside of their
     scope, but they do maintain state as if they were global
     variables, and so after they are initialized, subsequent
     references to these variables will be based on the last state
     that they were used.
   - While this can be a boon to low-level systems programmers as it
     can be a good savings of time and memory-allocation, it can also
     cause programmers to have confusing state errors. I suggest
     avoiding the static keyword.
   #+END_NOTES
   #+BEGIN_SRC c
   void static_inc(void) {
       static i = 0;
       printf("%i ", ++i);
   }
   int main(void) {
       for(int n = 0; n < 5; n++) {
           static_inc();
       }
   }
   /* 1 2 3 4 5 */
   #+END_SRC
