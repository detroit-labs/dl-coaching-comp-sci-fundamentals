#+TITLE:  Computer Science Fundamentals
#+AUTHOR: Detroit Labs Dev Coaching
#+DATE:   2018
#+EMAIL:  ndotz@detroitlabs.com
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   skip:nil d:nil todo:t pri:nil tags:not-in-toc timestamp:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_THEME: league
#+REVEAL_MARGIN: 0.2
# #+REVEAL_MIN_SCALE: 0.5
# #+REVEAL_MAX_SCALE: 2.5
#+REVEAL_EXTRA_CSS: ./presentation.css

* Lecture 6
  #+BEGIN_NOTES
  - In search of a better C
  - Differences between C and C++
  #+END_NOTES
* A Better C
  #+BEGIN_NOTES
  #+END_NOTES
** C is a Systems-Level Language
   #+BEGIN_NOTES
   - C is designed to abstract around the way processors and memory
     organize data and provide a mechanism to write code in one
     language that operates the same way on many computers.
   #+END_NOTES
** C++ is a General Purpose Language
   #+BEGIN_NOTES
   - C++ is an object-oriented language that caters to logical
     modeling of problems by thinking of them as interacting objects.
   #+END_NOTES
* C vs. C++
** namespaces
   #+BEGIN_NOTES
   - C has no built-in method of organizing code into logically divided
     modules. Declarations cannot share the same names or prototypes.
   - C++ has the concept of namespaces built into the language, so
     multiple modules that have functions with the same names or
     prototypes can be used without concern for name collisions.
   #+END_NOTES
   #+BEGIN_SRC c
   void foo1(char *s, int i);
   void foo2(char *s, int i);
   #+END_SRC
   #+BEGIN_SRC c++
   bar::foo(s, i);
   baz::foo(s, i);
   #+END_SRC
** inline
   #+BEGIN_NOTES
   - C has no mechanism for altering the execution scheme of
     functions. C programmers rely on text substitution from the
     preprocessor to inline code, usually as a means of optimization or
     generalization.
   - C++ has an builtin inline directive allowing for the language
     itself to manage the correctness of inlined code. Thus,
     programmers can organize code into logical blocks while also
     managing the execution scheme and relying on the compiler for
     added safety.
   #+END_NOTES
   #+BEGIN_SRC c
   #define MAX(a,b)     ( ((a) > (b)) ? (a) : (b) )
   #+END_SRC
   #+BEGIN_SRC c++
   inline int max(int x, int y) {
       return (x > y) ? x : y;
   }
   #+END_SRC
** localized declarations
   #+BEGIN_NOTES
   - for loops and similar constructs can make declarations that are
     local to their scope.
   - This is available in C99.
   #+END_NOTES
   #+BEGIN_SRC c++
   for(int i = 0; i < 10; i++) { // ...
   #+END_SRC
** overloading
   #+BEGIN_NOTES
   - functions and operators can be declared to work with a variety of
     signatures
   #+END_NOTES
   #+BEGIN_SRC c++
   void print(int i)   { cout &lt;&lt; "Printing int: " &lt;&lt; i &lt;&lt; endl;   }
   void print(float f) { cout &lt;&lt; "Printing float: " &lt;&lt; f &lt;&lt; endl; }
   void print(char* c) { cout &lt;&lt; "Printing char: " &lt;&lt; c &lt;&lt; endl;  }
   #+END_SRC
   #+BEGIN_SRC c++
   Fraction operator+(const Fraction& f) { // ...
   #+END_SRC
** Default Arguments
   #+BEGIN_NOTES
   - C++ provides the ability to provide default arguments, which
     allows a single function prototype to satisfy multiple calling
     argument patterns.
   #+END_NOTES
   #+BEGIN_SRC c++
   int power(int n, int k = 2) { // ...
   #+END_SRC
** typesafe I/O
   #+BEGIN_NOTES
   - cout and cin understand the type of the thing they are printing
     or reading.
   #+END_NOTES
   #+BEGIN_SRC c++
   int x = 3672;
   float y = 1.618
   cout &lt;&lt; "Ints and Floats! Like " &lt;&lt; x &lt;&lt; " and " &lt;&lt; y &lt;&lt; endl;
   cin >> x;
   #+END_SRC
** typesafe casts
   #+BEGIN_NOTES
   - static casts are good!
   #+END_NOTES
   #+BEGIN_SRC c
   char str[] = "derp";
   printf("%i\n", (int) str); // hilarity ensues.
   #+END_SRC
   #+BEGIN_SRC c++
   char str[] = "derp";
   cout &lt;&lt; static_cast&lt;int>(str); // Will not compile!
   #+END_SRC
** memory management
   #+BEGIN_SRC c
   struct fraction *f = malloc(struct fraction);
   /* ... */
   free(f);
   #+END_SRC
   #+BEGIN_SRC c++
   Fraction *f = new Fraction;
   /* ... */
   delete(f);
   #+END_SRC
** Object Orientation
   #+BEGIN_NOTES
   - polymorphism, encapsulation, inheritance
   #+END_NOTES
   #+BEGIN_SRC c++
   void draw_shape(Shape s) { /* ... */ }
   Circle c;
   Rect r;
   draw_shape(c);
   draw_shape(r);
   #+END_SRC
   #+BEGIN_SRC c++
   Circle c;
   Rect r;
   c->perimeter();
   r->perimeter();
   #+END_SRC
