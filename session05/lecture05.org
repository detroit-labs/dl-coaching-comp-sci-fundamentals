#+TITLE:  Computer Science Fundamentals
#+AUTHOR: Detroit Labs Dev Coaching
#+DATE:   2018
#+EMAIL:  ndotz@detroitlabs.com
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   skip:nil d:nil todo:t pri:nil tags:not-in-toc timestamp:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_THEME: league
#+REVEAL_MARGIN: 0.2
# #+REVEAL_MIN_SCALE: 0.5
# #+REVEAL_MAX_SCALE: 2.5
#+REVEAL_EXTRA_CSS: ./presentation.css

* Lecture 5
  #+BEGIN_NOTES
  The Stack and The Heap
  #+END_NOTES
* The Stack
  #+BEGIN_NOTES
  - We've already talked about the stack a few times. Specifically,
    we saw how memory is allocated at a low level for simple
    programs. All of this memory was allocated on the stack.
  #+END_NOTES
** https://i.imgur.com/QxUxd1p.png
   #+BEGIN_NOTES
   - Remember this diagram?
   - So far, when we've been creating programs, every variable we've
     allocated so far has been in the stack.
   - That is, given this simplified hand-drawn CPU model, we've been
     allocating space in what is labeled here as "program memory.
   #+END_NOTES
** https://i.imgur.com/Swoib35.png
   #+BEGIN_NOTES
   - We know at compile time based on all the things we've declared in
     our program exactly how much space our program will take up,
     because every instance of every variable is accounted for.
   #+END_NOTES
** https://upload.wikimedia.org/wikipedia/commons/1/1f/Call-stack-layout.svg
   #+BEGIN_NOTES
   - Not only that but the compiler, for all of the times we may have
     called it dumb, can figure out how many times a function might be
     called and manage memory space and reuse for any allocations we
     do within functions because all of the sizes we are using are
     already declared.
   - Because of this, the stack space for a program can grow and
     shrink to accommodate functions pushing and popping their
     declarations.
   - Stack space is also somewhat limited.
   #+END_NOTES
* The Heap
  #+BEGIN_NOTES
  - The heap is a logically separate memory space from the stack.
  - For convenience, you could consider the heap "the rest of your memory".
  - Because of this, there is no theoretical limit to how much heap
    space may be available.
  - Your program can request to allocate memory on the heap, and
    receives a reference to the memory allocated.
  #+END_NOTES
** https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Heap_metal.jpg/640px-Heap_metal.jpg
   #+BEGIN_NOTES
   - Unlike the stack however, memory in the heap is not managed
     automatically. If we request that memory be allocated by the heap,
     we must also request its deallocation to return the memory back to
     the pool of memory available to the system.
   - The computer keeps track of which sections of memory have been
     allocated to which programs and how much. This is how it knows
     what memory to return when we deallocate it.
   #+END_NOTES
** https://upload.wikimedia.org/wikipedia/commons/4/4a/External_Fragmentation.svg
   #+BEGIN_NOTES
   - Because of this bookkeeping, the heap is relatively slow (but
     still not by enough for you to notice in a normal program)
     compared to the stack, where it's likely that much of the memory
     is mapped to the CPU's cache.
   - This also means that depending on the strategy your program is
     using to allocate and deallocate memory, it's quite possible for
     the heap memory to become fragmented over time, making access
     even slower.
   #+END_NOTES
